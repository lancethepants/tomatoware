--- a/lib/spawn_faction_addclose.c
+++ b/lib/spawn_faction_addclose.c
@@ -47,7 +47,7 @@
   return posix_spawn_file_actions_addclose (file_actions, fd);
 #else
   /* Allocate more memory if needed.  */
-  if (file_actions->_used == file_actions->_allocated
+  if (file_actions->__used == file_actions->__allocated
       && __posix_spawn_file_actions_realloc (file_actions) != 0)
     /* This can only mean we ran out of memory.  */
     return ENOMEM;
@@ -56,12 +56,12 @@
     struct __spawn_action *rec;
 
     /* Add the new value.  */
-    rec = &file_actions->_actions[file_actions->_used];
+    rec = &file_actions->__actions[file_actions->__used];
     rec->tag = spawn_do_close;
     rec->action.open_action.fd = fd;
 
     /* Account for the new entry.  */
-    ++file_actions->_used;
+    ++file_actions->__used;
 
     return 0;
   }
--- a/lib/spawn_faction_adddup2.c
+++ b/lib/spawn_faction_adddup2.c
@@ -47,7 +47,7 @@
   return posix_spawn_file_actions_adddup2 (file_actions, fd, newfd);
 #else
   /* Allocate more memory if needed.  */
-  if (file_actions->_used == file_actions->_allocated
+  if (file_actions->__used == file_actions->__allocated
       && __posix_spawn_file_actions_realloc (file_actions) != 0)
     /* This can only mean we ran out of memory.  */
     return ENOMEM;
@@ -56,13 +56,13 @@
     struct __spawn_action *rec;
 
     /* Add the new value.  */
-    rec = &file_actions->_actions[file_actions->_used];
+    rec = &file_actions->__actions[file_actions->__used];
     rec->tag = spawn_do_dup2;
     rec->action.dup2_action.fd = fd;
     rec->action.dup2_action.newfd = newfd;
 
     /* Account for the new entry.  */
-    ++file_actions->_used;
+    ++file_actions->__used;
 
     return 0;
   }
--- a/lib/spawn_faction_addopen.c
+++ b/lib/spawn_faction_addopen.c
@@ -48,7 +48,7 @@
   return posix_spawn_file_actions_addopen (file_actions, fd, path, oflag, mode);
 #else
   /* Allocate more memory if needed.  */
-  if (file_actions->_used == file_actions->_allocated
+  if (file_actions->__used == file_actions->__allocated
       && __posix_spawn_file_actions_realloc (file_actions) != 0)
     /* This can only mean we ran out of memory.  */
     return ENOMEM;
@@ -57,7 +57,7 @@
     struct __spawn_action *rec;
 
     /* Add the new value.  */
-    rec = &file_actions->_actions[file_actions->_used];
+    rec = &file_actions->__actions[file_actions->__used];
     rec->tag = spawn_do_open;
     rec->action.open_action.fd = fd;
     rec->action.open_action.path = path;
@@ -65,7 +65,7 @@
     rec->action.open_action.mode = mode;
 
     /* Account for the new entry.  */
-    ++file_actions->_used;
+    ++file_actions->__used;
 
     return 0;
   }
--- a/lib/spawn_faction_destroy.c
+++ b/lib/spawn_faction_destroy.c
@@ -22,10 +22,9 @@
 #include <stdlib.h>
 
 /* Initialize data structure for file attribute for 'spawn' call.  */
-int
-posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *file_actions)
+/* int posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *file_actions)
 {
-  /* Free the memory allocated.  */
-  free (file_actions->_actions);
+  free (file_actions->__actions);
   return 0;
 }
+*/
--- a/lib/spawn_faction_init.c
+++ b/lib/spawn_faction_init.c
@@ -31,26 +31,24 @@
 int
 __posix_spawn_file_actions_realloc (posix_spawn_file_actions_t *file_actions)
 {
-  int newalloc = file_actions->_allocated + 8;
-  void *newmem = realloc (file_actions->_actions,
+  int newalloc = file_actions->__allocated + 8;
+  void *newmem = realloc (file_actions->__actions,
                           newalloc * sizeof (struct __spawn_action));
 
   if (newmem == NULL)
     /* Not enough memory.  */
     return ENOMEM;
 
-  file_actions->_actions = (struct __spawn_action *) newmem;
-  file_actions->_allocated = newalloc;
+  file_actions->__actions = (struct __spawn_action *) newmem;
+  file_actions->__allocated = newalloc;
 
   return 0;
 }
 
 
 /* Initialize data structure for file attribute for 'spawn' call.  */
-int
-posix_spawn_file_actions_init (posix_spawn_file_actions_t *file_actions)
+/* int posix_spawn_file_actions_init (posix_spawn_file_actions_t *file_actions)
 {
-  /* Simply clear all the elements.  */
   memset (file_actions, '\0', sizeof (*file_actions));
   return 0;
-}
+} */
--- a/lib/spawnattr_destroy.c
+++ b/lib/spawnattr_destroy.c
@@ -20,9 +20,7 @@
 #include <spawn.h>
 
 /* Initialize data structure for file attribute for 'spawn' call.  */
-int
-posix_spawnattr_destroy (posix_spawnattr_t *attr)
+/* int posix_spawnattr_destroy (posix_spawnattr_t *attr)
 {
-  /* Nothing to do in the moment.  */
   return 0;
-}
+} */
--- a/lib/spawnattr_init.c
+++ b/lib/spawnattr_init.c
@@ -22,12 +22,10 @@
 #include <string.h>
 
 /* Initialize data structure for file attribute for 'spawn' call.  */
-int
-posix_spawnattr_init (posix_spawnattr_t *attr)
+/* int posix_spawnattr_init (posix_spawnattr_t *attr)
 {
-  /* All elements have to be initialized to the default values which
-     is generally zero.  */
   memset (attr, '\0', sizeof (*attr));
 
   return 0;
 }
+*/
--- a/lib/spawnattr_setflags.c
+++ b/lib/spawnattr_setflags.c
@@ -31,15 +31,13 @@
                    | POSIX_SPAWN_USEVFORK)
 
 /* Store flags in the attribute structure.  */
-int
-posix_spawnattr_setflags (posix_spawnattr_t *attr, short int flags)
+/* int posix_spawnattr_setflags (posix_spawnattr_t *attr, short int flags)
 {
-  /* Check no invalid bits are set.  */
   if (flags & ~ALL_FLAGS)
     return EINVAL;
 
-  /* Store the flag word.  */
   attr->_flags = flags;
 
   return 0;
 }
+*/
--- a/lib/spawnattr_setsigmask.c
+++ b/lib/spawnattr_setsigmask.c
@@ -22,12 +22,10 @@
 #include <string.h>
 
 /* Set signal mask for the new process in ATTR to SIGMASK.  */
-int
-posix_spawnattr_setsigmask (posix_spawnattr_t *attr,
-                            const sigset_t *sigmask)
+/* int posix_spawnattr_setsigmask (posix_spawnattr_t *attr, const sigset_t *sigmask)
 {
-  /* Copy the sigset_t data to the user buffer.  */
   memcpy (&attr->_ss, sigmask, sizeof (sigset_t));
 
   return 0;
 }
+*/
--- a/lib/spawni.c
+++ b/lib/spawni.c
@@ -147,7 +147,7 @@
   size_t pathlen;
 
   /* Do this once.  */
-  short int flags = attrp == NULL ? 0 : attrp->_flags;
+  short int flags = attrp == NULL ? 0 : attrp->__flags;
 
   /* Avoid gcc warning
        "variable 'flags' might be clobbered by 'longjmp' or 'vfork'"  */
@@ -183,7 +183,7 @@
 
   /* Set signal mask.  */
   if ((flags & POSIX_SPAWN_SETSIGMASK) != 0
-      && sigprocmask (SIG_SETMASK, &attrp->_ss, NULL) != 0)
+      && sigprocmask (SIG_SETMASK, &attrp->__ss, NULL) != 0)
     _exit (SPAWN_ERROR);
 
   /* Set signal default action.  */
@@ -200,7 +200,7 @@
       sa.sa_handler = SIG_DFL;
 
       for (sig = 1; sig <= NSIG; ++sig)
-        if (sigismember (&attrp->_sd, sig) != 0
+        if (sigismember (&attrp->__sd, sig) != 0
             && sigaction (sig, &sa, NULL) != 0)
           _exit (SPAWN_ERROR);
 
@@ -211,21 +211,21 @@
   if ((flags & (POSIX_SPAWN_SETSCHEDPARAM | POSIX_SPAWN_SETSCHEDULER))
       == POSIX_SPAWN_SETSCHEDPARAM)
     {
-      if (sched_setparam (0, &attrp->_sp) == -1)
+      if (sched_setparam (0, &attrp->__sp) == -1)
         _exit (SPAWN_ERROR);
     }
   else if ((flags & POSIX_SPAWN_SETSCHEDULER) != 0)
     {
-      if (sched_setscheduler (0, attrp->_policy,
+      if (sched_setscheduler (0, attrp->__policy,
                               (flags & POSIX_SPAWN_SETSCHEDPARAM) != 0
-                              ? &attrp->_sp : NULL) == -1)
+                              ? &attrp->__sp : NULL) == -1)
         _exit (SPAWN_ERROR);
     }
 #endif
 
   /* Set the process group ID.  */
   if ((flags & POSIX_SPAWN_SETPGROUP) != 0
-      && setpgid (0, attrp->_pgrp) != 0)
+      && setpgid (0, attrp->__pgrp) != 0)
     _exit (SPAWN_ERROR);
 
   /* Set the effective user and group IDs.  */
@@ -239,9 +239,9 @@
     {
       int cnt;
 
-      for (cnt = 0; cnt < file_actions->_used; ++cnt)
+      for (cnt = 0; cnt < file_actions->__used; ++cnt)
         {
-          struct __spawn_action *action = &file_actions->_actions[cnt];
+          struct __spawn_action *action = &file_actions->__actions[cnt];
 
           switch (action->tag)
             {
