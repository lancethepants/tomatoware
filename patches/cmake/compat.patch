diff -Naur cmake-3.18.0_orig/Utilities/cmlibuv/src/unix/core.c cmake-3.18.0/Utilities/cmlibuv/src/unix/core.c
--- cmake-3.18.0_orig/Utilities/cmlibuv/src/unix/core.c	2020-07-20 13:41:29.987341612 +0000
+++ cmake-3.18.0/Utilities/cmlibuv/src/unix/core.c	2020-07-20 13:42:02.955620990 +0000
@@ -1023,7 +1023,7 @@
 #if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__linux__)
   int r;
 
-  r = dup3(oldfd, newfd, O_CLOEXEC);
+  r = dup2(oldfd, newfd);
   if (r == -1)
     return UV__ERR(errno);
 
diff -Naur cmake-3.18.0_orig/Utilities/cmlibuv/src/unix/linux-core.c cmake-3.18.0/Utilities/cmlibuv/src/unix/linux-core.c
--- cmake-3.18.0_orig/Utilities/cmlibuv/src/unix/linux-core.c	2020-07-20 13:41:29.987341612 +0000
+++ cmake-3.18.0/Utilities/cmlibuv/src/unix/linux-core.c	2020-07-20 13:41:36.331395403 +0000
@@ -90,12 +90,12 @@
    * a.k.a. Lollipop. Since EPOLL_CLOEXEC is an alias for O_CLOEXEC on all
    * architectures, we just use that instead.
    */
-#if defined(__ANDROID_API__) && __ANDROID_API__ < 21
+//#if defined(__ANDROID_API__) && __ANDROID_API__ < 21
   fd = -1;
   errno = ENOSYS;
-#else
-  fd = epoll_create1(O_CLOEXEC);
-#endif
+//#else
+//  fd = epoll_create1(O_CLOEXEC);
+//#endif
 
   /* epoll_create1() can fail either because it's not implemented (old kernel)
    * or because it doesn't understand the O_CLOEXEC flag.
diff -Naur cmake-3.18.0_orig/Utilities/cmlibuv/src/unix/process.c cmake-3.18.0/Utilities/cmlibuv/src/unix/process.c
--- cmake-3.18.0_orig/Utilities/cmlibuv/src/unix/process.c	2020-07-20 13:41:29.991341646 +0000
+++ cmake-3.18.0/Utilities/cmlibuv/src/unix/process.c	2020-07-20 13:41:36.331395403 +0000
@@ -151,7 +151,7 @@
 
 
 int uv__make_pipe(int fds[2], int flags) {
-#if defined(__FreeBSD__) || defined(__linux__)
+#if defined(__FreeBSD__)
   if (pipe2(fds, flags | O_CLOEXEC))
     return UV__ERR(errno);
 
